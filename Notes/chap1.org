#+title: Chapter 1

* Table of content :toc:
- [[#11-getting-started][1.1 Getting started]]
- [[#variables-and-arithmetic-expressions][Variables and arithmetic expressions]]
- [[#13-the-for-statement][1.3 The for statement]]
- [[#14-symbolic-constants][1.4 Symbolic constants]]
- [[#15-character-input-and-output][1.5 Character input and output]]
  - [[#151-file-copying][1.5.1 File copying]]
  - [[#152-character-counting][1.5.2 Character counting]]
  - [[#153-line-counting][1.5.3 Line counting]]
  - [[#154-word-counting][1.5.4 Word counting]]
  - [[#16-arrays][1.6 Arrays]]
  - [[#17-functions][1.7 Functions]]
  -  [[#18-arguments---call-by-value][1.8 Arguments - Call by value]]
  - [[#19-character-arrays][1.9 Character arrays]]
  - [[#110-external-variables-and-scope][1.10 External variables and scope]]

* 1.1 Getting started
We will start with the simple hell world program that prints hello world to the screen.
#+begin_src c
#include <stdio.h>

// Print fahrenheit to celsius table
int main() {
  int fahr = 0, celsius = 0;

  int lower = 0;
  int upper = 300;
  int step = 20;

  while (fahr <= upper) {
    celsius = 5 * (fahr - 32) / 9;
    printf("%3d %6d\n", fahr, celsius);
    fahr += step;
  }
}
#+end_src
We can compile the command using ~cc main.c~, we can then run the program by typing the name of the program on the command line prefixed by ~./~. The name of the program defaults to ~a.out~.

Normally a programmer is at liberty to name a function anything they want, however, every program must have a function named ~main~. This is because the ~main~ function is the begining of the execution of programs.

~main~ will usually rely on other functions to perform the necessery jobs, these could be functions the user of the language wrote or ones from libraries such as the standard library.

The first line of our program tells the compiler about to include information from the standard input output library.
#+begin_src c
#include <stdio.h>
#+end_src

A function can be called by naming it and following it with brackets with a list of arguments between them. Like how were are doing it here
#+begin_src c
    printf("%3d %6d\n", fahr, celsius);
#+end_src

A sequence of characters enclosed within double quotes, like ~"hello world\n"~ , is called a character string, or string constant. The ~\n~ within the string represents a new line character. If you want a new line within your string, you must use this character, inserting a new line within the string constant will produce a compiler error.

* Variables and arithmetic expressions
Next is a program that will print a table of Fahrenheit temperatures and their Celsius counterpart using the formula C=(5/9)(F-32)
#+begin_src c
#include <stdio.h>

// Print fahrenheit to celsius table
int main() {
  float fahr = 0., celsius = 0.;

  int lower = 0;
  int upper = 300;
  int step = 20;

  while (fahr <= upper) {
    celsius = (5. / 9.) * (fahr - 32.);
    printf("%3.0f %6.1f\n", fahr, celsius);
    fahr += step;
  }
}
#+end_src

Variables must be declared before their usage in C. A variable declaration consists of the type name followed by a list of variable names.
#+begin_src c
int var1, var2, var3;
#+end_src

We could also initialise our list of variables uppon declaration
#+begin_src c
int var1 = 1, var2 = 2, var3 = 3;
#+end_src
Variables must be initialised before they are used. Initialasation does not need to be at the point of declaration, it can be after
#+begin_src c
int var1;
var1 = 0;
#+end_src

The type int means that the variables listed after it are integers. There's also the type float which means flaoting point, or in other words numbers that may have fractions. The size of these two types are dependent on the machine they are compiled for.

The types that C provide are the following

| type     | description                     |
|----------+---------------------------------|
| ~char~   | character - a single byte       |
| ~short~  | short integer                   |
| ~long~   | long integer                    |
| ~double~ | double-precision floating point |
| ~int~    | integer                         |
| ~float~  | floating point                  |
The size of thes types are machine dependent.

C also offers arrays, structures and unions of these basi type, pointers to these types and functions that return them.

Each conversion is computed in the same way and so we use a loop to calculate.
#+begin_src c
while(fahr <= upper) {
    // do calculations...
}
#+end_src

Most of the work for our program gets carried out in the loop's body. The celsius temperature is computed and assigned to the variable celsius like so
#+begin_src c
    celsius = 5 * (fahr - 32) / 9;
#+end_src

We multiply by 5 and then subtract by nine because integer division truncates (fractinal parts are discarded) in C. This makes it so 5/9 always evaluates to 0 and if we had used the original equation without any changing all our results would be 0.

The original printf usage
#+begin_src c
    printf("%d\t%d\n", fahr, celsius);
#+end_src
 are not right-justified, however the fix for that is easy
#+begin_src c
    printf("%3d %6d\n", fahr, celsius);
#+end_src

But that's not the real problem with our program is that it's not very accurate as we are using integers. 0 degrees fehrenheit is 17.8 degrees celcious not 17. We can fix this by using floating point variables instead of integers in our arithmetic.
#+INCLUDE: "../chap1/fehrenheitToCelsius/main2.c" src c
This solution is mostly the same as the previous one, the main difference being that we are using floats for both ~fahr~ and ~celcious~, and that the equation we use in the code looks much closer to the original one.

The rule for arithimitic in C is that if the operator has integer operands it will perform an integer operation, however if the arithimitic has at least one floating point number the integer will be converted to a floating point before the operation is done. in other words our celsius assignment could have been written like so
#+begin_src c
    celsius = (5. / 9.) * (fahr - 32);
#+end_src
and it would have worked as intended, but it's good practice to be explicit when we use a floating point number
The same rule applies to comparission operators.

The characters we can use for the ~printf~ function for printing values are as follows
| character | description          |
|-----------+----------------------|
| %d        | print as decimal     |
| %f        | print as float       |
| %o        | print as octal       |
| %x        | print as hexadecimal |
| %c        | print as character   |
| %s        | print as string      |
| %%        | print self           |

* 1.3 The for statement
There are more then one way to write a program, we could have written the fehrenheit to celcious program using a for loop instead of a while loop, and here is how it would look like
#+begin_src c
#include <stdio.h>

// Print fahrenheit to celsius table
int main() {
  int fahr;

  for (fahr = 0; fahr <= 300; fahr += 20) {
    printf("%3d %6.1f\n", fahr, (5. / 9.) * (fahr - 32));
  }
}
#+end_src

* 1.4 Symbolic constants
It is usually bad practice to use numbers in a program. They don't convey any information to someone else that might want to read and change the code later, it makes their purpose ambiguos. One way to deal with this is by providing them names that are meaningful. A ~#define~ does that. It's a way to define a symbolic name or a symbolic constant. it's structure is of
~#define name replacement list~
After such a line any occurance of the name will be replaced by the replacement text.
Here's how we could use it in our previous program
#+begin_src c
#include <stdio.h>

#define LOWER 0
#define UPPER 300
#define STEP 20

// Print fahrenheit to celsius table
int main() {
  int fahr;

  for (fahr = 0; fahr <= UPPER; fahr += STEP) {
    printf("%3d %6.1f\n", fahr, (5. / 9.) * (fahr - 32));
  }
}
#+end_src
Symbolic constants are usually written in upper case to distiguinsh them from variable names. Notice that they do not have a semicolon at the end of them.

* 1.5 Character input and output
The standard library has a simple model of input and output. Text input or output, wherever it's coming from or going to it'll be handled as streams of character. A series of characters divided into lines is what is called a text stream. Each line of the stream contains zero or more characters followed by a new line character. The library is responsible for ensuring that the stream comfirms to this model outlined previously. A programmer using the standard library does not need to concern himself about how new lines are represented outside of the program.

The standard library offers ~getchar~ and ~putchar~ as the simplest form of this (along with other functions). Each time ~getchar~ is called it reads the next character in the stream and returns it as it's value.
#+begin_src c
char c;
c = getchar();
#+end_src
~c~ contains the next character of a input. The character will usually come from the keyboard. Input from files will be discussed later.

The ~putchar~ function will print a character every time it's called
#+begin_src c
putchar(c);
#+end_src
~putchar~ will usually print something to the screen.

** 1.5.1 File copying
Knowing ~getchar~ and ~putchar~ we can write a lot of useful code without knowing anything else about input and output. Here is a simple example that copies its input to its output one character at a time.
#+begin_src c
#include <stdio.h>

int main() {
  int c;

  c = getchar();
  while (c != EOF) {
    putchar(c);
    c = getchar();
  }
}
#+end_src
What seems like characters on the screen is stored by our program as a bit pattern. The ~char~ type is used for storing these type of data but any integer type can be used. We are using ~int~ for an important but not obvious reason.
~char~ can represent any character on screen, however we also want to detect the ~EOF~ input. This input is outside the range of a ~char~. Because of this ~c~ must be a type that is big enough to include a range the can safely store ~EOF~. Therefor we use ~int~.

NOTE: use ~ctrl d~ to trigger the ~EOF~ character in the terminal.

~EOF~ is defined by ~<stdio.h~>~. The specific value of this integer does not matter, as long as the value is not the same as a character in the range of ~char~. By using this symbolic number we can ensure that nothing in the program depends on a specific numeric value.

We could write this program more concisely
#+begin_src c
#include <stdio.h>

int main() {
  int c;

  while ((c = getchar()) != EOF) {
    putchar(c);
    c = getchar();
  }
}
#+end_src

** 1.5.2 Character counting
#+begin_src c
#include <stdio.h>

int main() {
  long nc;
  while (getchar() != EOF)
    nc++;
  printf("%ld\n", nc);

  return 0;
}
#+end_src
This new program counts the number of characters a user typed. In it the ~++~ operator (increment operator) is introduces, it may come before or after a variable name and it's equivalent to writing ~nc = nc + 1;~. The increment operator comes with a counter part ~--~ operator (decrement operator), which, as the name implies, decrements by one.
A long is chosen as the counter for the program to give users the ability to count more characters then would have otherwise been possible with an into.

We could give users an even bigger number of characters to count by using a double. Here's a program that uses that and uses a for loop instead of a while loop to do the job.
#+begin_src c
#include <stdio.h>

int main() {
  double nc;

  for (nc = 0; getchar() != EOF; ++nc)
    ;

  printf("%.0f\n", nc);
}
#+end_src
The function ~printf~ uses a ~%f~ for both float and double. Using ~%.0f~ makes the function suppress the decimal point which in this case will always be zero.

The body of the loop of this program isn't needed as all the work is done in the test and increment part, however a for loop always needs a body so we use a null statement which is represented by the semicolon on it's own. In this case we could have put it on the same line as the for loop declaration but we put it in it's own line to make it more visible.

** 1.5.3 Line counting
Counting line program
#+begin_src c
#include <stdio.h>

int main() {
  int c, nl;

  nl = 0;
  while ((c = getchar()) != EOF)
    if (c == '\n')
      nl++;

  printf("%d\n", nl);
}
#+end_src
The standard library ensures that input text stream are represented by a series of lines terminated by a newline character. So to count lines we just have to count the number of newline characters that appear.

This ~==~ is the equality operator and reads as 'is equal to'.

A character written between single quotes represents a integer value that is equivalent ot the numerical value of the character. This is called a character constant.

Escape sequences are also legal character constants.

** 1.5.4 Word counting
Word counting program
#+begin_src c
#include <stdio.h>

#define IN 1
#define OUT 0

int main() {
  int c, nl, nw, nc, state;

  state = OUT;
  nl = nw = nc = 0;
  while ((c = getchar()) != EOF) {
    nc++;
    if (c == '\n')
      nl++;
    if (c == ' ' || c == '\n' || c == '\t')
      state = OUT;
    else if (state == OUT) {
      state = IN;
      nw++;
    }
  }
  printf("line count: %d; word count: %d; character count: %d\n", nl, nw, nc);
}
#+end_src

** 1.6 Arrays
#+begin_src c
#include <stdio.h>

// count digits, white space and others
int main() {
  int c, i, nwhite, nother;
  int ndigit[10];
  nwhite = nother = 0;

  for (i = 0; i < 10; i++)
    ndigit[i] = 0;

  while ((c = getchar()) != EOF)
    if (c >= '0' && c <= '9')
      ndigit[c - '0']++;
    else if (c == ' ' || c == '\n' || c == '\t')
      nwhite++;
    else
      nother++;

  printf("digits =");
  for (i = 0; i < 10; i++)
    printf(" %d", ndigit[i]);
  printf(", white space = %d, other = %d\n", nwhite, nother);
}
#+end_src

** 1.7 Functions
#+begin_src c
#include <stdio.h>

int power(int m, int n);

int main() {
  int i;

  for (i = 0; i < 10; i++)
    printf("%d %d %d\n", i, power(2, i), power(-3, i));
}

int power(int base, int n) {
  int i, p;
  p = 1;

  for (i = 1; i <= n; i++)
    p = p * base;
  return p;
}
#+end_src
In C functions do not get hoisted to the top of the scope. So we define the function at the top of the file so that we can use it in the main function. To define the function we declare the function signature. The actual function can be declared at any other point, including in another file.

**  1.8 Arguments - Call by value
#+begin_src c
// power: raise base to n-th power; n>=0; version 2
int power(int base, int n){
    int p;

        for (p = 1; n > 0; n--)
            p = p * base;
        return p;
}
#+end_src

** 1.9 Character arrays
#+begin_src c
#include <stdio.h>
#define MAXLINE 1000

int getLine(char line[], int maxline);
void copy(char to[], char from[]);

int main() {
  int len;
  int max = 0;
  char line[MAXLINE];
  char longest[MAXLINE];

  while ((len = getLine(line, MAXLINE)) > 0)
    if (len > max) {
      max = len;
      copy(longest, line);
    }
  if (max > 0)
    printf("%s", longest);

  return 0;
}

int getLine(char s[], int lim) {
  int c, i;
  for (i = 0; i < lim - 1 && (c = getchar()) != EOF && c != '\n'; i++)
    s[i] = c;

  if (c == '\n') {
    s[i] = c;
    i++;
  }
  s[i] = '\0';

  return i;
}

void copy(char to[], char from[]) {
  int i = 0;
  while ((to[i] = from[i]) != '\0')
    i++;
}
#+end_src
A string is represented as an array of characters in C. The string ends with the escape character ~\0~.

** 1.10 External variables and scope
#+begin_src c
#include <stdio.h>

#define MAXLINE 1000

int max;
char line[MAXLINE];
char longest[MAXLINE];

int getLine(void);
void copy(void);

int main() {
  int len;
  extern int max;
  extern char longest[];
  max = 0;

  while ((len = getLine()) > 0)
    if (len > max) {
      max = len;
      copy();
    }
  if (max > 0)
    printf("%s", longest);

  return 0;
}

int getLine(void) {
  int c, i;
  extern char line[];

  for (i = 0; i < MAXLINE - 1 && (c = getchar()) != EOF && c != '\n'; i++)
    line[i] = c;
  if (c == '\n') {
    line[i] = c;
    i++;
  }
  line[i] = '\0';

  return i;
}

void copy(void) {
  int i = 0;
  extern char line[], longest[];

  while ((longest[i] = line[i]) != '\0')
    i++;
}
#+end_src
The ~extern~ keyword is saying that this variable is an external variable that has already been defined. In the program above it's use is redundant. The ~extern~ keyword is needed when variables are declared in different files then where it is being used.
It is good to avoid using external variables as they clutter the scope.
C has a lexical scope.
